<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李小飞</title>
  
  <subtitle>记录工作中遇到的问题</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.lixf.io/"/>
  <updated>2020-05-07T14:03:53.560Z</updated>
  <id>https://www.lixf.io/</id>
  
  <author>
    <name>李小飞</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用阿里云的OSS将markdown中的本地路径的图片替换为网络图片</title>
    <link href="https://www.lixf.io/2020/05/07/Replace-the-local-path-pictures-in-markdown-with-network-pictures/"/>
    <id>https://www.lixf.io/2020/05/07/Replace-the-local-path-pictures-in-markdown-with-network-pictures/</id>
    <published>2020-05-07T13:09:46.000Z</published>
    <updated>2020-05-07T14:03:53.560Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在写markdown的时候,有时候为了更加清楚表示我们的观点,我们需要在md中插入一些图片资源。这些图片可能只存在我们本地的文件系统中，但这样就影响了我们把自己的博客发布到互联网上。</p><p>常见的有下面的方法来解决这个问题:</p><ol><li><p>将我们的图片存放到图床里，然后获取到一个互联网上的链接，然后在我们的markdown中使用这个互联网链接。</p></li><li><p>如果我们使用的hexo+github page的话，可以使用hexo-asset-image插件(<a href="https://whisperchi.com/posts/62275/" target="_blank" rel="noopener">点击这里</a>查看使用方法)，这个插件会把我们的本地图片资源一起打包发布到github上，从而可以在互联网上正常访问我们的博客。</p></li></ol><p>这两种方法各有缺点，第一种方法的缺点是如果我们图片很多的话，每个图片都需要上传到图床，操作是非常麻烦的。第二种方法的缺点是github在国内访问速度比较慢，如果博客引用的github的资源比较多而且比较大的话，会导致页面加载时间严重变长，另外这也不是通用的解决方案。</p><blockquote><p>我们可以参考<a href="https://whisperchi.com/posts/35930/" target="_blank" rel="noopener">这篇博客</a>，分别将博客托管到国内的仓库和github上，再利用阿里云的DNS的双线解析功能，针对不同的线路解析到不同的仓库上。</p></blockquote><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>综上，我写了一个小工具<a href="https://github.com/lixiaofei123/md-img-oss" target="_blank" rel="noopener">md-img-oss</a>来处理这个问题。这个工具的作用是检测markdown文件中的图片，如果发现图片的路径是本地文件路径，就将这个图片上传到阿里云OSS上,并将原文中的本地图片路径替换为阿里云OSS提供的路径。<br>如图，分别是替换前和替换后的效果</p><p><img src="https://static.huiyuanai.com/lixfio/image/Replace-the-local-path-pictures-in-markdown-with-network-pictures/localpath.png" alt="替换前"></p><p><img src="https://static.huiyuanai.com/lixfio/image/Replace-the-local-path-pictures-in-markdown-with-network-pictures/networkpath.png" alt="替换后"></p><h3 id="安装md-img-oss"><a href="#安装md-img-oss" class="headerlink" title="安装md-img-oss"></a>安装md-img-oss</h3><p>安装md-img-oss，如果你本地有golang环境的话，只需要一行命令，就可以安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/lixiaofei123/md-img-oss</span><br></pre></td></tr></table></figure></p><p>如果本地没有golang环境，<a href="https://github.com/lixiaofei123/md-img-oss/releases" target="_blank" rel="noopener">点击这里</a>下载对应平台的软件。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>安装完毕后，执行下面的命令，即可自动替换图片链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">md-img-oss -mddir <span class="string">"C:\Users\Administrator\Desktop\lixiaofei123.github.io\source\_posts"</span> -endpoint oss-cn-shenzhen.aliyuncs.com -accesskeyId &lt;替换成你的accesskeyId&gt; -accessKeySecret &lt;替换成你的accesskeySecret&gt; -bucketName &lt;替换成你的bucketName&gt; -ossDir lixfio/image -domain https://static.huiyuanai.com</span><br><span class="line"><span class="comment"># ossDir 和 domain 是非必须的，可以不需要</span></span><br></pre></td></tr></table></figure><p>如果觉得每次都执行这么长的命令不方便的话，可以把这个命令写到脚本里，然后通过执行脚本来运行这条命令</p><p>也可以执行下面的命令查看各个参数的意思</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">md-img-oss --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><p>下面是执行结果<br><img src="https://static.huiyuanai.com/lixfio/image/Replace-the-local-path-pictures-in-markdown-with-network-pictures/output.png" alt="执行结果"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;在写markdown的时候,有时候为了更加清楚表示我们的观点,我们需要在md中插入一些图片资源。这些图片可能只存在我们本地的文件系统中，但这
      
    
    </summary>
    
      <category term="实用" scheme="https://www.lixf.io/categories/%E5%AE%9E%E7%94%A8/"/>
    
    
      <category term="markdown" scheme="https://www.lixf.io/tags/markdown/"/>
    
      <category term="图床" scheme="https://www.lixf.io/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>拓展nextcloud中ocdownloader的功能</title>
    <link href="https://www.lixf.io/2020/05/06/Expand-the-function-of-ocdownloader/"/>
    <id>https://www.lixf.io/2020/05/06/Expand-the-function-of-ocdownloader/</id>
    <published>2020-05-06T08:32:03.000Z</published>
    <updated>2020-05-07T12:59:54.640Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文只针对不熟悉php的用户</strong></p><p>经过<a href="https://www.lixf.io/2020/04/29/nextcloud-in-docker/">上文</a>的步骤在成功部署了一个nextcloud服务以及安装了nextcloud插件以后，便想自己扩展一下ocdownloader的功能，让其能够从我指定的一个视频网站（非Youtube）的某个视频链接上自动下载其对应的视频。 比较尴尬的是我虽然有一点点其它语言开发的经验，但是并不会php开发（上次接触php语言已经是6年前的事情了），但是，这个并不能难倒我，在几番尝试中，最终还是实现了自己想要的功能。</p><p>首先，我们简单看一下ocdownloader的功能，然后根据其中两个特点</p><ol><li>其能够从指定的http链接上下载其对应的文件，</li><li>其大部分功能都是通过调用第三方工具实现</li></ol><p>根据这两个特点，很容易降低我们的开发难度。我们可以使用我们自己擅长的语言来开发一个工具，这个工具可以从视频链接中提取出对应的资源链接。然后，修改ocdownloader的代码，调用我们自己的工具将视频链接处理成对应的资源链接，将这个资源链接作为参数传递给ocdownloader自己的http下载接口。</p><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><p>这一步，可以使用自己擅长的语言进行开发。如下图所示，是我自己写的一个根据某网站视频链接提取资源链接以及标题的一个小工具</p><p><img src="https://static.huiyuanai.com/lixfio/image/Expand-the-function-of-ocdownloader/tool-example.png" alt="工具例子"></p><p>该工具支持两个参数，proxy参数可以指定代理，videoUrl则是网站视频链接，执行命令后返回的json字符串中包含两个字段，title为标题，url则是提取出的视频链接</p><blockquote><p>至于怎么从视频链接中提取出视频对应的资源链接，这个需要具体网站具体分析。以上面的视频网站为例，是将资源的链接拆散后再用js拼在一起的，虽然解析的代码工作量稍微大一点，但是难度并不大。</p></blockquote><h3 id="拓展代码"><a href="#拓展代码" class="headerlink" title="拓展代码"></a>拓展代码</h3><p>一旦我们开发出来上面的工具以后，后面的工作就简单了，虽然不懂PHP语言，但是可以比葫芦画瓢的修改原ocDownloader的代码，来实现我们的功能。</p><p>为了简单，我是这样实现我的功能的，用户在新HTTP下载任务中填入下载链接，然后我在代码中判断这个链接是不是指定的视频网站的链接，如果是的话，就调用工具获取这个视频链接所对应的资源链接。然后将用户填写的下载链接替换成工具所获取的资源链接，同时将输出文件名修改为工具所获取的视频的名称。</p><p>下面是修改步骤</p><p>首先，将其插件代码克隆到本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/e-alfred/ocdownloader.git</span><br></pre></td></tr></table></figure><p>然后，进入到controller/lib目录下，新建一个php文件，我这里叫做pbutil.php，其所对应的类的功能就是调用我们上面的工具并获取对应的返回内容。</p><p>例如，下面是实现的代码。实际上，下面的代码完全是模仿同目录下youtube.php文件修改来的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">OCA</span>\<span class="title">ocDownloader</span>\<span class="title">Controller</span>\<span class="title">Lib</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PBUtil</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> $PBDLBinary = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> $URL = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> $ProxyAddress = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> $ProxyPort = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数需要传入pbutil的执行文件路径，以及视频链接</span></span><br><span class="line">    <span class="comment">// 当然这里也可以不需要传入pbutil的路径，而是直接在这里硬编码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($PBDLBinary, $URL)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;PBDLBinary = $PBDLBinary;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;URL = $URL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setProxy</span><span class="params">($ProxyAddress, $ProxyPort)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ProxyAddress = $ProxyAddress;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ProxyPort = $ProxyPort;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//  这个叫做getVideoUrl()是因为我写的pbutil工具的第一个版本就是只返回了一个资源链接。因为后面在使用过程中发现，下载的时候可以指定一个输出文件名，因此修改了pbutil的代码，使其返回了一个包含了视频标题和资源链接的json字符串。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getVideoUrl</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $Proxy = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (!is_null(<span class="keyword">$this</span>-&gt;ProxyAddress) &amp;&amp; <span class="keyword">$this</span>-&gt;ProxyPort &gt; <span class="number">0</span> &amp;&amp; <span class="keyword">$this</span>-&gt;ProxyPort &lt;= <span class="number">65536</span>) &#123;</span><br><span class="line">            $Proxy = <span class="string">' -proxy '</span> . rtrim(<span class="keyword">$this</span>-&gt;ProxyAddress, <span class="string">'/'</span>) . <span class="string">':'</span> . <span class="keyword">$this</span>-&gt;ProxyPort;</span><br><span class="line">        &#125;</span><br><span class="line">        $Output = shell_exec(</span><br><span class="line">            <span class="keyword">$this</span>-&gt;PBDLBinary.<span class="string">' -videoUrl \''</span>.<span class="keyword">$this</span>-&gt;URL.<span class="string">'\' '</span></span><br><span class="line">            .(is_null($Proxy) ? <span class="string">''</span> : $Proxy)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> $Output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后修改controller目录下的httpdownloader.php文件，</p><p>首先，在99行的上面，也就是  if($isMagnet)这个代码的上面，加入下面的代码片段</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$sourceUrl = $_POST[<span class="string">'FILE'</span>];</span><br><span class="line"><span class="keyword">if</span> (strpos($sourceUrl, <span class="string">'******'</span>) !== <span class="keyword">false</span>) &#123; <span class="comment">//******换成视频网站的名字，例如 youku</span></span><br><span class="line">    $pbUtil = <span class="keyword">new</span> PBUtil(<span class="string">'/usr/bin/pbutil'</span>, $sourceUrl); <span class="comment">//传入执行文件路径以及视频链接</span></span><br><span class="line">    <span class="keyword">if</span> (!is_null(<span class="keyword">$this</span> - &gt; ProxyAddress) &amp;&amp; <span class="keyword">$this</span> - &gt; ProxyPort &gt; <span class="number">0</span> &amp;&amp; <span class="keyword">$this</span> - &gt; ProxyPort &lt;= <span class="number">65536</span>) &#123;</span><br><span class="line">        $pbUtil - &gt; SetProxy(<span class="keyword">$this</span> - &gt; ProxyAddress, <span class="keyword">$this</span> - &gt; ProxyPort);</span><br><span class="line">    &#125;</span><br><span class="line">    $respdata = $pbUtil - &gt; GetVideoUrl();</span><br><span class="line">    $jsondata = json_decode($respdata); <span class="comment">//获取返回结果后调用json解析</span></span><br><span class="line">    $sourceUrl = $jsondata - &gt; url; <span class="comment">// 获取资源链接</span></span><br><span class="line">    $videotitle = $jsondata - &gt; title.<span class="string">'.mp4'</span>; <span class="comment">//获取文件名称</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，将 if($isMagnet)后面出现的$_POST[‘FILE’]全部替换为$sourceUrl</p><p>然后，在114行的下面，也就是 $OPTIONS = array(‘dir’ =&gt; $this-&gt;AbsoluteDownloadsFolder, ‘out’ =&gt; $Target, ‘follow-torrent’ =&gt; $isMagnet);这一行的代码下面，加入下面的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($videotitle) &amp;&amp; strlen(trim($videotitle)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    $OPTIONS[<span class="string">'out'</span>] = $videotitle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="部署插件"><a href="#部署插件" class="headerlink" title="部署插件"></a>部署插件</h3><p>将我们修改后的ocdownloader复制到nextcloud的app/custom_apps目录下，然后到应用里启用改插件，就可以使用我们自己写的功能了!!!</p><p><img src="https://static.huiyuanai.com/lixfio/image/Expand-the-function-of-ocdownloader/downloadpage.png" alt="下载页面"></p><h3 id="视频封面"><a href="#视频封面" class="headerlink" title="视频封面"></a>视频封面</h3><p>默认情况下，nextcloud并不会为我们的视频生成封面，而是使用默认的向右三角形的封面。我们可以使用 Preview Generator插件来为我们的视频生成封面。具体使用方法可以参考这篇博客<a href="https://www.allerstorfer.at/nextcloud-install-preview-generator/" target="_blank" rel="noopener">Nextcloud: Install Preview Generator</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;本文只针对不熟悉php的用户&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;经过&lt;a href=&quot;https://www.lixf.io/2020/04/29/nextcloud-in-docker/&quot;&gt;上文&lt;/a&gt;的步骤在成功部署了一个nextcloud服务以及安装了n
      
    
    </summary>
    
      <category term="实用" scheme="https://www.lixf.io/categories/%E5%AE%9E%E7%94%A8/"/>
    
    
      <category term="nextcloud" scheme="https://www.lixf.io/tags/nextcloud/"/>
    
      <category term="ocdownloader" scheme="https://www.lixf.io/tags/ocdownloader/"/>
    
  </entry>
  
  <entry>
    <title>开源网盘nextcloud使用介绍</title>
    <link href="https://www.lixf.io/2020/04/29/nextcloud-in-docker/"/>
    <id>https://www.lixf.io/2020/04/29/nextcloud-in-docker/</id>
    <published>2020-04-29T07:31:52.000Z</published>
    <updated>2020-05-07T14:27:15.256Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://nextcloud.com/" target="_blank" rel="noopener">NextCloud</a>是老外开源的一个用PHP开发的有丰富插件的网盘，针对各个平台（安卓、ios、linux、mac、win）都有对应的客户端，功能十分强大。</p><h3 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h3><h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><p><img src="https://static.huiyuanai.com/lixfio/image/nextcloud-in-docker/login.png" alt="登录页面"></p><h4 id="主页"><a href="#主页" class="headerlink" title="主页"></a>主页</h4><p><img src="https://static.huiyuanai.com/lixfio/image/nextcloud-in-docker/main.png" alt="主页"></p><h4 id="文件列表"><a href="#文件列表" class="headerlink" title="文件列表"></a>文件列表</h4><p><img src="https://static.huiyuanai.com/lixfio/image/nextcloud-in-docker/files.png" alt="文件列表"></p><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>下载速度因个人网络不同而不同。我这里是因为电信的上传带宽只有30M，因此在公网的速度只能达到每秒2兆多。如果在内网访问，速度能达到每秒近百兆</p><p><img src="https://static.huiyuanai.com/lixfio/image/nextcloud-in-docker/downloader.png" alt="下载"></p><h3 id="Docker部署"><a href="#Docker部署" class="headerlink" title="Docker部署"></a>Docker部署</h3><p>部署的文档<a href="https://hub.docker.com/_/nextcloud" target="_blank" rel="noopener">官网</a>写的很详细了，最简单可以用下面一条命令就可以启动。当然实际使用要做各种配置(录例如数据库、存储)，可以去看<a href="https://hub.docker.com/_/nextcloud" target="_blank" rel="noopener">官网</a>说明，这里就不再详说了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:80 nextcloud</span><br></pre></td></tr></table></figure><h3 id="离线下载"><a href="#离线下载" class="headerlink" title="离线下载"></a>离线下载</h3><p>这个是一个重点要宣传的功能，其作用与百度网盘的离线下载一样，可以将指定链接下载到自己的服务器上。</p><p>离线下载并不是nextcloud自带的功能（实际上nextcloud大部分的功能都是通过插件实现），而是借助一个叫做ocDownloader的插件实现。用管理员账户点击主页右上角的头像，在下拉菜单中选择【应用】，然后搜索ocDownloader安装即可。由于国内访问nextcloud自己的网站很慢，因此这里耐心等待一会。实在下载不下来的，可以找个能科学上网的机器，直接访问<a href="https://apps.nextcloud.com/apps/ocdownloader" target="_blank" rel="noopener">插件主页</a>下载安装包，然后解压到nextcloud的/var/www/html/custom_apps目录下，然后在应用页面启用该插件。</p><p>效果如图:</p><p><img src="https://static.huiyuanai.com/lixfio/image/nextcloud-in-docker/ocdownloader.png" alt="ocDownloader"></p><p>从图中可以看出，离线下载功能支持HTTP、FTP、Bittorrent协议，以及支持YOUTUBE链接。不过在使用前需要安装Aria2（也可以用curl,但是aria2功能更强大）、以及youtube-dl(如果需要下载youtube视频)。</p><p>鉴于我们使用的是Docker部署，我这里封了一个安装好aria2和youtube-dl的Docker镜像【mrlee326/nextcloud-aria】，已经上传到dockerhub，可以下载安装使用。</p><p>下载youtube视频需要能够科学上网，如果nextcloud部署的宿主机网络环境不是很自由的话，可以在【设置】-&gt; 【其它设置】-&gt; 【ocDownloader】中配置一下代理。</p><p>如果有v2ray的服务器的话，可以使用【mrlee326/v2raycli】镜像在宿主机上启动一个容器来提供代理，并链接到nextcloud容器上来使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name proxy.com -p 7777:6666 -v /root/v2ray/config.json:/etc/v2ray/config.json:ro mrlee326/v2raycli</span><br><span class="line"># 容器的名字本来是可以随便取的，但是如果不设置这种url形式的，后面在ocdownloader的配置中会出错</span><br></pre></td></tr></table></figure><p>启动代理容器后，在启动nextcloud的时候加上 –link proxy.cn参数，例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --link proxy.com -p 8080:80 mrlee326/nextcloud-aria</span><br></pre></td></tr></table></figure><p>然后在【其它设置】-&gt; 【ocDownloader】中可以指定代理地址为 <a href="http://proxy.com" target="_blank" rel="noopener">http://proxy.com</a> ，端口是 7777</p><p>设置代理的作用不仅仅是为了下载youtube视频，用国内的网络直接访问外国的一些资源的时候，往往速度不是很理想，甚至可能必须配置代理才能使用。如果我们nextcloud的离线下载可以自由访问外网的话，就可以先利用离线下载功能将资源下载到我们的nextcloud里，再从nextcloud下载到我们本地，十分方便。</p><h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><p>我们也可以为我们的云盘启用HTTPS，感谢Docker容器，让这一切变的如此简单。这里主要使用两个容器，【jwilder/nginx-proxy】和【jrcs/letsencrypt-nginx-proxy-companion】。我们也可以用这两个容器为其它任意服务签发证书</p><p>虽然简单，我们还是要做一些准备工作。</p><ol><li><p>第一步当然是将域名解析到宿主机的公网IP上了，这里假设域名是pan.foo.bar</p></li><li><p>由于nextcloud主要是为了下载上传一些文件，因此，必须调整nginx配置中的client_max_body_size参数为一个较大的值。jwilder/nginx-proxy提供了两种修改方式，全局的和指定某域名的。这里为了方便，我们直接配置全局的方式。</p><p>在任意目录下创建一个my_proxy.conf文件（我这里是在/data/nginx/conf.d/目录下创建的），然后写入下面的内容。前三行是设置超时时间的，根据自己的需要进行设置。如果只想修改某域名的此项配置，<a href="https://github.com/nginx-proxy/nginx-proxy" target="_blank" rel="noopener">点击这里</a>参考官方文档进行配置。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">proxy_connect_timeout 600;</span><br><span class="line">proxy_send_timeout 600;</span><br><span class="line">proxy_read_timeout 600;</span><br><span class="line">client_max_body_size 10000m;</span><br></pre></td></tr></table></figure><p>这样准备工作就做完了，下一步是启动jwilder/nginx-proxy容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run --detach   \</span><br><span class="line">--restart=always  --name nginx-proxy   \</span><br><span class="line">--publish 80:80    \</span><br><span class="line">--volume /usr/share/nginx/html    \</span><br><span class="line">--volume /data/nginx/conf.d/my_proxy.conf:/etc/nginx/conf.d/my_proxy.conf:ro  \</span><br><span class="line">--volume /var/run/docker.sock:/tmp/docker.sock:ro  \</span><br><span class="line">jwilder/nginx-proxy</span><br></pre></td></tr></table></figure><p>nginx-proxy容器启动完成后，用下面的命令启动letsencrypt-nginx-proxy-companion容器。将<a href="mailto:me@foo.bar" target="_blank" rel="noopener">me@foo.bar</a>换成自己的邮箱</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run --detach \</span><br><span class="line">   --name nginx-proxy-letsencrypt \</span><br><span class="line">   --volumes-from nginx-proxy \</span><br><span class="line">   --volume /var/run/docker.sock:/var/run/docker.sock:ro \</span><br><span class="line">   --env <span class="string">"DEFAULT_EMAIL=me@foo.bar"</span> \</span><br><span class="line">   jrcs/letsencrypt-nginx-proxy-companion</span><br></pre></td></tr></table></figure><p>最后就可以启动nextcloud容器啦</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run --detach \</span><br><span class="line">    --name nextcloud \</span><br><span class="line">    --restart always \</span><br><span class="line">    --link proxy.com\</span><br><span class="line">    --env <span class="string">"VIRTUAL_HOST=pan.foo.bar"</span> \</span><br><span class="line">    --env <span class="string">"VIRTUAL_PORT=3000"</span> \</span><br><span class="line">    --env <span class="string">"LETSENCRYPT_HOST=pan.foo.bar"</span> \</span><br><span class="line">    --env <span class="string">"LETSENCRYPT_EMAIL=me@foo.bar"</span> \</span><br><span class="line">    --v /data/nextcloud:/var/www/html \</span><br><span class="line">     mrlee326/nextcloud-aria</span><br></pre></td></tr></table></figure><p>启动完成稍等一下，letsencrypt-nginx-proxy-companion会自动为你签发证书，等证书签发完成后，就可以通过<a href="https://pan.foo.bar访问网盘了。如果直接输入pan.foo.bar，也会自动跳转到https://pan.foo.bar的。" target="_blank" rel="noopener">https://pan.foo.bar访问网盘了。如果直接输入pan.foo.bar，也会自动跳转到https://pan.foo.bar的。</a></p><p>值得注意的是，每次重新启动容器，letsencrypt-nginx-proxy-companion都会重新签发证书，可能一不小心就会超过letsencrypt的配额限制，这样的话，得等一周后才能释放配额。因此如果在配置阶段，可以先不加LETSENCRYPT的两个环境变量，避免自动签发证书，等调试好了，再加上这两个环境变量。</p><p>最终效果如图所示，在域名的左边出现了一个代表启用了https的小锁的标志。</p><p><img src="https://static.huiyuanai.com/lixfio/image/nextcloud-in-docker/httttttps.png" alt="https"></p><h3 id="必备的插件"><a href="#必备的插件" class="headerlink" title="必备的插件"></a>必备的插件</h3><p>nextcloud还有很多其它有用的插件，这里介绍两个十分有用的插件【Mind Map】和 【Draw.io】</p><h4 id="Mind-Map"><a href="#Mind-Map" class="headerlink" title="Mind Map"></a>Mind Map</h4><p>用来画思维导图，启用了这个插件以后，我们就可以直接创建思维导图，并进行绘制</p><p><img src="https://static.huiyuanai.com/lixfio/image/nextcloud-in-docker/mindmap.png" alt></p><h4 id="Draw-io"><a href="#Draw-io" class="headerlink" title="Draw.io"></a>Draw.io</h4><p>用来画流程图，作用十分类似于国内的在线的ProcessOn。安装了Draw.io后，我们就可以将流程图文件保存在我们自己的服务器上，并且没有数量限制。不过，不像【Mind Map】，这个插件依赖外部的Drawio服务，我们可以选择自行部署，也可以选择直接使用公网的。如果使用公网的Drawio，除了打开的时候速度慢一点，别的和自己搭建的效果是一模一样的。当然，drawio也有对应的docker镜像，就算自己部署，也是特别的容易。</p><p><img src="https://static.huiyuanai.com/lixfio/image/nextcloud-in-docker/drawio.png" alt></p><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>现在的云服务器的存储空间都不是很大，而且要不就是不支持增加存储，要不就是增加存储特别的贵。因此，我目前采用的是，将nextcloud部署到树莓派上，再购买一台搬瓦工GIA线路的服务器，然后通过内网穿透将服务暴露在公网上。这样，一方面解决了存储的问题，一方面在内网的时候可以直接通过内网访问nextcloud，最后公网服务器也可以做别的事情。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://nextcloud.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NextCloud&lt;/a&gt;是老外开源的一个用PHP开发的有丰富插件的网盘，针对各个平台（安卓、ios、linux、mac、win）都有对应的客户端
      
    
    </summary>
    
      <category term="实用" scheme="https://www.lixf.io/categories/%E5%AE%9E%E7%94%A8/"/>
    
    
      <category term="nextcloud" scheme="https://www.lixf.io/tags/nextcloud/"/>
    
      <category term="ocdownloader" scheme="https://www.lixf.io/tags/ocdownloader/"/>
    
  </entry>
  
  <entry>
    <title>GoLang 内存模型</title>
    <link href="https://www.lixf.io/2019/09/20/The-Go-Memory-Model/"/>
    <id>https://www.lixf.io/2019/09/20/The-Go-Memory-Model/</id>
    <published>2019-09-20T07:34:41.000Z</published>
    <updated>2020-05-07T12:56:28.407Z</updated>
    
    <content type="html"><![CDATA[<p>Golang的内存模型主要解决的是多协程下的对同一个变量的内存可见性的问题。</p><h1 id="Happens-Before"><a href="#Happens-Before" class="headerlink" title="Happens Before"></a>Happens Before</h1><p>在同一个协程中，读和写的行为必须表现的和代码中指定的一致。虽然编译器以及处理器可能会对我们的代码进行重排序从而来加快程序的执行速度，但是这种重排序不会改变代码中定义的行为。但是这种重排序可能会影响多协程下的可见性。例如，在一个协程中执行了 a=1;b=2，另外一个协程可能读取到更新后的b值和更新前的a值。</p><p>Happens before定义了Golang程序中读写操作在内存中执行的顺序。如果事件e1 happens before 事件e2，那么可以说事件e2 happens after 事件e2，如果事件e1既没有happens before 事件e2，又没有happens after时间e2之后，那么可以说是e1和e2是并行的。</p><p><strong>在单线程中，<em>happens-before</em>的顺序和代码表达的顺序是一致的。</strong></p><p>现在有一个变量v，有一个对变量v的写操作w，和对变量v的读操作r。如果需要让读操作r能(但不一定)观察到写操作w的结果，需要满足下面两个条件。</p><ol><li>读操作r不happen before写操作w (有可能是并发发生)</li><li>没有另外一个写操作发生在w之后r之前。(还是有可能是并发发生)</li></ol><p>如果想要确保读操作r一定能观察到写操作w的结果，则需要满足下面两个条件。</p><ol><li>写操作w happen before 读操作r</li><li>任何另外一个写操作都 happen before写操作w之前，happen after读操作r之后。</li></ol><h1 id="Synchronization"><a href="#Synchronization" class="headerlink" title="Synchronization"></a>Synchronization</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p><em>如果package p引入了package q，那么package q的init方法的完成happens before package p的任何方法之前</em></p><blockquote><p><em>If a package</em> <code>p</code> <em>imports package</em> <code>q</code><em>, the completion of</em> <code>q</code><em>‘s</em> <code>init</code> <em>functions happens before the start of any of</em> <code>p</code><em>‘s.</em></p></blockquote><p><strong>main方法happen after所有的init方法结束之后</strong></p><blockquote><p><em>The</em> <code>go</code> <em>statement that starts a new goroutine happens before the goroutine’s execution begins.</em></p></blockquote><h2 id="协程创建"><a href="#协程创建" class="headerlink" title="协程创建"></a>协程创建</h2><p><em>新启动一个协程happens before这个协程的执行</em></p><blockquote><p><em>The</em> <code>go</code> <em>statement that starts a new goroutine happens before the goroutine’s execution begins.</em></p></blockquote><h2 id="协程的销毁"><a href="#协程的销毁" class="headerlink" title="协程的销毁"></a>协程的销毁</h2><p>协程的结束不保证happen before于程序中的任何事件。</p><blockquote><p>The exit of a goroutine is not guaranteed to happen before any event in the program</p></blockquote><p>例如下面这个例子</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; a = <span class="string">"hello"</span> &#125;()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对a的赋值操作可能发生在任意一个事件点，因此不能确保另外一个协程能到看到赋值后的a的结果</p><h2 id="channel-通信"><a href="#channel-通信" class="headerlink" title="channel 通信"></a>channel 通信</h2><p>golang里有一个很重要的思想<em>不要通过共享内存来通信，而是通过通信来共享内存</em>.</p><blockquote><p>Don’t communicate by sharing memory; share memory by communicating.</p></blockquote><p>对应channel，也有几条重要的happens-before规则</p><p>对channel发送数据happens before于对于此channel相应的接收。</p><blockquote><p> A send on a channel happens before the corresponding receive from that channel completes.</p></blockquote><p>例如下面代码</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">a = <span class="string">"hello, world"</span></span><br><span class="line">c &lt;- <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> f()</span><br><span class="line">&lt;-c</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>能够确保输出 “hello world”。　a=”hello, world” happens before c &lt;- 0,c &lt;- 0 happens before &lt;-c，&lt;-c happens before print(a)，根据happens-before的传递性，a=”hello, world” happens before print(a)。</p><p><em>关闭channel happens before 接收channel因关闭返回的０值</em></p><blockquote><p>The closing of a channel happens before a receive that returns a zero value because the channel is closed.</p></blockquote><p><em>从一个没有缓冲的channel里接收值happens before向这个channel发送值</em></p><blockquote><p>A receive from an unbuffered channel happens before the send on that channel completes.</p></blockquote><p>这个和上面是刚好相反的。区别在于这个是一个没有缓冲的channel，即通过make(chan int)构造的通道。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">a = <span class="string">"hello, world"</span></span><br><span class="line">&lt;- c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> f()</span><br><span class="line">c &lt;- <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>一个容量为c的通过的第k个值的接收happens before与这个通道第k+c个值的发送</em></p><blockquote><p>The<em> </em>k<strong>th receive on a channel with capacity<em> </em>C<em> </em>happens before the<em> </em>k</strong>+<strong>C</strong>th send from that channel completes.</p></blockquote><p>例如下面这个例子，可以确保同时只有三个协程在执行w()</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> limit = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, w := <span class="keyword">range</span> work &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(w <span class="keyword">func</span>()</span>)</span> &#123;</span><br><span class="line">limit &lt;- <span class="number">1</span></span><br><span class="line">w()</span><br><span class="line">&lt;-limit</span><br><span class="line">&#125;(w)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">select</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Locks"><a href="#Locks" class="headerlink" title="Locks"></a>Locks</h2><p><em>对于sync.Mutex或者sync.RWMutex　变量，如果n &lt; m，那么第n次解锁happens before与第m次加锁</em></p><blockquote><p><em>For any</em> <code>sync.Mutex</code> <em>or</em> <code>sync.RWMutex</code> <em>variable</em> <code>l</code> <em>and</em> <em>n</em> <em>&lt;</em> <em>m**, call</em> <em>n</em> <em>of</em> <code>l.Unlock()</code> <em>happens before call</em> <em>m</em> <em>of</em> <code>l.Lock()</code> <em>returns.</em></p></blockquote><p>例如</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> l sync.Mutex</span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">a = <span class="string">"hello, world"</span></span><br><span class="line">l.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">l.Lock()</span><br><span class="line"><span class="keyword">go</span> f()</span><br><span class="line">l.Lock()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，l.Unlock() happens before 第二次l.Lock()，根据传递性，a = “hello, world”　happens before　print(a)，因此可以确保输出”hello, world”</p><blockquote><p><em>For any call to</em> <code>l.RLock</code> <em>on a</em> <code>sync.RWMutex</code> <em>variable</em> <code>l</code><em>, there is an</em> <em>n</em> <em>such that the</em> <code>l.RLock</code> <em>happens (returns) after call</em> <em>n</em> <em>to</em> <code>l.Unlock</code> <em>and the matching</em> <code>l.RUnlock</code> <em>happens before call</em> <em>n**+1 to</em> <code>l.Lock</code><em>.</em></p></blockquote><h2 id="Once"><a href="#Once" class="headerlink" title="Once"></a>Once</h2><p>golang的sync中提供了一个安全的机制来确保多个协程的初始化方法只执行一次。它就是Once。如果多个协程同时调用了once.Do(f)，函数f()只会被执行一次，对once.Do(f)的调用将会等待f()执行结束后返回。</p><p><em>once.Do(f)中f()的执行返回happens before任何一个once.Do(f)的调用返回。</em></p><blockquote><p><em>A single call of</em> <code>f()</code> <em>from</em> <code>once.Do(f)</code> <em>happens (returns) before any call of</em> <code>once.Do(f)</code> <em>returns.</em></p></blockquote><p>例如这个程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var a string</span><br><span class="line">var once sync.Once</span><br><span class="line"></span><br><span class="line">func setup() &#123;</span><br><span class="line">a = &quot;hello, world&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func doprint() &#123;</span><br><span class="line">once.Do(setup)</span><br><span class="line">print(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func twoprint() &#123;</span><br><span class="line">go doprint()</span><br><span class="line">go doprint()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="不正确的同步"><a href="#不正确的同步" class="headerlink" title="不正确的同步"></a>不正确的同步</h1><p>在并发情况中，即使读操作r观察到了写操作w的写入的值，也不意味happening after读操作r的能够观察到happened before写操作w的写。</p><p>看下面的例子</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">g</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> f()</span><br><span class="line">g()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面输出的结果有可能是２　0，即使print(b)输出了２，print(a)仍可能输出0。（当然这只是一种可能，这种可能性有可能永远不会发生）</p><p>还有一种是双重检查锁的代码。例如下面这段代码。第二个协程有可能只观察到了done=true，但是没有观察到ａ=”hello, world”，然后输出一个空字符串。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> done <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setup</span><span class="params">()</span></span> &#123;</span><br><span class="line">a = <span class="string">"hello, world"</span></span><br><span class="line">done = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doprint</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> !done &#123;</span><br><span class="line">once.Do(setup)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoprint</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> doprint()</span><br><span class="line"><span class="keyword">go</span> doprint()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外一个不正确的写法是循环等待一个值。不正确的原因和上面差不多，也是第二个协程有可能只观察到了done=true，但是没有观察到ａ=”hello, world”，然后输出一个空字符串。另外，main方法也不保证协程setup()会被完成。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> done <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setup</span><span class="params">()</span></span> &#123;</span><br><span class="line">a = <span class="string">"hello, world"</span></span><br><span class="line">done = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> setup()</span><br><span class="line"><span class="keyword">for</span> !done &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Golang的内存模型主要解决的是多协程下的对同一个变量的内存可见性的问题。&lt;/p&gt;
&lt;h1 id=&quot;Happens-Before&quot;&gt;&lt;a href=&quot;#Happens-Before&quot; class=&quot;headerlink&quot; title=&quot;Happens Before&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="golang学习" scheme="https://www.lixf.io/tags/golang%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>将网页转换成本地应用程序</title>
    <link href="https://www.lixf.io/2019/08/14/create-native-app-from-web-url/"/>
    <id>https://www.lixf.io/2019/08/14/create-native-app-from-web-url/</id>
    <published>2019-08-14T06:05:37.000Z</published>
    <updated>2020-05-07T12:59:54.731Z</updated>
    
    <content type="html"><![CDATA[<p>微信没有linux客户端，只有网页版，每次使用都要打开一个浏览器而且比较麻烦，需要制作成一个本地应用来方便使用。</p><p>这里使用在线制作的方式</p><p>打开网址 <a href="https://appmaker.xyz/web2desk" target="_blank" rel="noopener">https://appmaker.xyz/web2desk</a> ，如下图</p><p><img src="https://static.huiyuanai.com/lixfio/image/create-native-app-from-web-url/appmaker.png" alt></p><p>根据提示输入对应的信息，然后点击Create Now按钮，静静等待2分钟，就会跳转到一个制作成功的页面，再静静等待一会，就可以下载了。</p><blockquote><p>邮箱地址的话，我刚开始填的QQ邮箱，没有收到邮件，后面填写的谷歌邮箱，收到了邮件，也可能是我自己网络的问题导致的。</p></blockquote><p>然后根据我前面的<a href="https://www.lixf.io/2019/08/14/ubuntu-create-desktop-icon/">ubuntu制作桌面图标</a>制作成桌面图标就好</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;微信没有linux客户端，只有网页版，每次使用都要打开一个浏览器而且比较麻烦，需要制作成一个本地应用来方便使用。&lt;/p&gt;
&lt;p&gt;这里使用在线制作的方式&lt;/p&gt;
&lt;p&gt;打开网址 &lt;a href=&quot;https://appmaker.xyz/web2desk&quot; target=&quot;_
      
    
    </summary>
    
      <category term="实用" scheme="https://www.lixf.io/categories/%E5%AE%9E%E7%94%A8/"/>
    
    
      <category term="ubuntu" scheme="https://www.lixf.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu制作桌面图标</title>
    <link href="https://www.lixf.io/2019/08/14/ubuntu-create-desktop-icon/"/>
    <id>https://www.lixf.io/2019/08/14/ubuntu-create-desktop-icon/</id>
    <published>2019-08-14T05:54:09.000Z</published>
    <updated>2020-05-07T12:59:55.491Z</updated>
    
    <content type="html"><![CDATA[<p>在使用ubuntu系统的时候，有些软件是直接从网上下载的安装包，为了方便启动这些软件，需要做成桌面图标的形式。</p><p>这里以typora为例说一下怎么制作，其实也很简单</p><p>进入到/usr/share/applications目录后,用你自己喜欢的文件编辑器创建一个Typora.desktop的文件，然后里面写入下面的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Name=Typora</span><br><span class="line">Comment=Typora</span><br><span class="line">Exec=/home/lixf/software/Typora/Typora</span><br><span class="line">Icon=/home/lixf/software/Typora/resources/app/asserts/icon/icon_32x32@2x.png</span><br><span class="line">Terminal=false</span><br><span class="line">starttupNotify=true</span><br><span class="line">Type=Application</span><br><span class="line">Categories=Application;Development;</span><br></pre></td></tr></table></figure><p>保存以后，进入到ubuntu的应用程序列表里就可以看到typora了，是不是很简单呢??</p><p><img src="https://static.huiyuanai.com/lixfio/image/ubuntu-create-desktop-icon/typora.png" alt="图标已经出来了"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在使用ubuntu系统的时候，有些软件是直接从网上下载的安装包，为了方便启动这些软件，需要做成桌面图标的形式。&lt;/p&gt;
&lt;p&gt;这里以typora为例说一下怎么制作，其实也很简单&lt;/p&gt;
&lt;p&gt;进入到/usr/share/applications目录后,用你自己喜欢的文件编辑
      
    
    </summary>
    
      <category term="实用" scheme="https://www.lixf.io/categories/%E5%AE%9E%E7%94%A8/"/>
    
    
      <category term="ubuntu" scheme="https://www.lixf.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>我的私人书签记录</title>
    <link href="https://www.lixf.io/2019/06/28/My-personal-bookmarks/"/>
    <id>https://www.lixf.io/2019/06/28/My-personal-bookmarks/</id>
    <published>2019-06-28T01:46:34.000Z</published>
    <updated>2020-05-07T12:56:28.406Z</updated>
    
    <content type="html"><![CDATA[<p>保存一下工作中常用的网址</p><p><strong>k8s</strong>相关</p><p><a href="https://kubernetes.io/docs" target="_blank" rel="noopener">k8s官网文档</a>   <a href="https://hub.helm.sh" target="_blank" rel="noopener">helm官方仓库</a> <a href="https://kubernetes.github.io/ingress-nginx/deploy/" target="_blank" rel="noopener">nginx-ingress 部署</a>  <a href="https://github.com/operator-framework/operator-sdk/blob/master/doc/user-guide.md" target="_blank" rel="noopener">operator-framework</a></p><p><a href="https://www.getambassador.io/" target="_blank" rel="noopener">ambassador</a>  <a href="https://istio.io" target="_blank" rel="noopener">Istio文档</a></p><p><strong>docker</strong>相关</p><p><a href="https://docs.docker.com/" target="_blank" rel="noopener">Docker官方文档</a>   <a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noopener">Dockerfile文档</a>   <a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker官方仓库</a></p><p><strong>常用镜像</strong>地址</p><p><a href="https://opsx.alibaba.com/mirror" target="_blank" rel="noopener">阿里云镜像</a>  <a href="https://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">清华镜像</a>  <a href="http://mirrors.ustc.edu.cn/" target="_blank" rel="noopener">中科大镜像</a>  <a href="http://mirror.azure.cn" target="_blank" rel="noopener">Azure中国镜像</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;保存一下工作中常用的网址&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;k8s&lt;/strong&gt;相关&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/docs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;k8s官网文档&lt;/a&gt;   &lt;a hr
      
    
    </summary>
    
    
      <category term="kubernetes" scheme="https://www.lixf.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>临时复制粘贴处</title>
    <link href="https://www.lixf.io/2019/06/17/textarea/"/>
    <id>https://www.lixf.io/2019/06/17/textarea/</id>
    <published>2019-06-17T07:05:19.000Z</published>
    <updated>2020-05-07T12:56:28.427Z</updated>
    
    <content type="html"><![CDATA[<p>粘贴的东西暂时没地方放？？先保存到这里吧。（您的数据只保存在浏览器本地）</p><p><textarea id="editbox" style="padding:10px;width:80%;margin-left:auto;margin-right:auto;height:350px"> </textarea><br><span id="tips" style="color:red;font-size:12px"></span></p><script>    Date.prototype.Format = function(fmt) {            var o = {                "M+" : this.getMonth() + 1,                "d+" : this.getDate(),                "h+" : this.getHours(),                "m+" : this.getMinutes(),                "s+" : this.getSeconds(),                "q+" : Math.floor((this.getMonth() + 3) / 3),                "S" : this.getMilliseconds()            };            if (/(y+)/.test(fmt))                fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));            for (var k in o)            if (new RegExp("(" + k + ")").test(fmt))                fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));            return fmt;        }      var editbox =  document.getElementById("editbox");      if(localStorage.autoSave == undefined){        localStorage.autoSave = "";      }    editbox.value = localStorage.autoSave;      setInterval(function(){         var value = editbox.value;         var saveValue = localStorage.autoSave;         if(value != saveValue){             localStorage.autoSave = value;             document.getElementById("tips").innerText= "内容已经在"+new Date().Format("yyyy-MM-dd hh:mm:ss")+"时自动保存";         }      },1000 * 3);</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;粘贴的东西暂时没地方放？？先保存到这里吧。（您的数据只保存在浏览器本地）&lt;/p&gt;
&lt;p&gt;&lt;textarea id=&quot;editbox&quot; style=&quot;padding:10px;width:80%;margin-left:auto;margin-right:auto;heigh
      
    
    </summary>
    
    
      <category term="tools" scheme="https://www.lixf.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>docker下载镜像的时候出现handshake failure</title>
    <link href="https://www.lixf.io/2019/06/13/docker-pull-remote-error-tls-handshake-failure/"/>
    <id>https://www.lixf.io/2019/06/13/docker-pull-remote-error-tls-handshake-failure/</id>
    <published>2019-06-13T11:38:59.000Z</published>
    <updated>2020-05-07T12:56:28.410Z</updated>
    
    <content type="html"><![CDATA[<p>在使用k8s的时候，发现pod的状态都是ImagePullError，查看pod的状态发现在pull镜像的时候，报下面的错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error response from daemon: Get https://quay.io/v2/: remote error: tls: handshake failure</span><br></pre></td></tr></table></figure><p>在pod所运行的服务器上执行curl <a href="https://www.baidu.com也报了下面的错误" target="_blank" rel="noopener">https://www.baidu.com也报了下面的错误</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master ~]# curl https://www.baidu.com</span><br><span class="line">curl: (60) Peer&apos;s Certificate issuer is not recognized.</span><br><span class="line">More details here: http://curl.haxx.se/docs/sslcerts.html</span><br><span class="line"></span><br><span class="line">curl performs SSL certificate verification by default, using a &quot;bundle&quot;</span><br><span class="line"> of Certificate Authority (CA) public keys (CA certs). If the default</span><br><span class="line"> bundle file isn&apos;t adequate, you can specify an alternate file</span><br><span class="line"> using the --cacert option.</span><br><span class="line">If this HTTPS server uses a certificate signed by a CA represented in</span><br><span class="line"> the bundle, the certificate verification probably failed due to a</span><br><span class="line"> problem with the certificate (it might be expired, or the name might</span><br><span class="line"> not match the domain name in the URL).</span><br><span class="line">If you&apos;d like to turn off curl&apos;s verification of the certificate, use</span><br><span class="line"> the -k (or --insecure) option.</span><br></pre></td></tr></table></figure><p>在<strong>stackoverflow</strong>上找到了问题的答案（原网址忘记了保存），那就是当前服务器的时间不对，可能差个几秒或者几十秒，解决办法就是同步一下当前服务器的时间。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntpdate ntp1.aliyun.com</span><br></pre></td></tr></table></figure><p>同步之后问题解决。</p><p>当然出现问题的原因可能有很多种，不一定能解决多有的此类问题。</p><p>为了防止后面出现同样的问题，可以将这条命令写到定时任务里。输入下面的命令打开定时任务的编辑窗口（如果没有安装crontab需要先安装一下）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>在里面加上这么一行命令,让每隔1分钟同步一下时间。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/1 * * * * /usr/sbin/ntpdate ntp1.aliyun.com &gt; /dev/null 2&gt;&amp;1; /sbin/hwclock -w</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在使用k8s的时候，发现pod的状态都是ImagePullError，查看pod的状态发现在pull镜像的时候，报下面的错误&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;sp
      
    
    </summary>
    
      <category term="kubernetes" scheme="https://www.lixf.io/categories/kubernetes/"/>
    
    
      <category term="kubernetes" scheme="https://www.lixf.io/tags/kubernetes/"/>
    
      <category term="docker" scheme="https://www.lixf.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>k8s相关镜像源整理</title>
    <link href="https://www.lixf.io/2019/06/13/k8s-docker-images-mirrors/"/>
    <id>https://www.lixf.io/2019/06/13/k8s-docker-images-mirrors/</id>
    <published>2019-06-13T03:30:32.000Z</published>
    <updated>2020-05-07T12:56:28.411Z</updated>
    
    <content type="html"><![CDATA[<p><span style="color:red"><em>现在 azk8s.cn只允许azure的访问了，可以用下面的内容替代</em></span></p><p>gcr.io ==&gt; registry.aliyuncs.com</p><p>k8s.gcr.io ==&gt; registry.aliyuncs.com/google-containers</p><p>quay.io ==&gt; quay-mirror.qiniu.com</p><p>在使用k8s过程中，经常会因为国内恶劣的网络环境导致镜像下载慢甚至无法下载，因此，需要配置一下镜像源。这里整理一下我在网上找到的一些镜像源</p><h2 id="gcr-io、k8s-gcr-io镜像加速"><a href="#gcr-io、k8s-gcr-io镜像加速" class="headerlink" title="gcr.io、k8s.gcr.io镜像加速"></a>gcr.io、k8s.gcr.io镜像加速</h2><p>gcr.io和k8s.gcr.io是k8s自身的一些组件以及第三方组件经常使用的仓库地址，这个地址在国内是无法直接访问的，因此需要使用到国内的一些镜像源来进行拉取。这里使用<strong>Azure中国镜像</strong></p><p>gcr.io镜像仓库的镜像可以直接把gcr.io替换成gcr.azk8s.cn</p><p>例如，gcr.io/kubernetes-helm/tiller:v2.13.1镜像，可以用下面的命令进行拉取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull gcr.azk8s.cn/kubernetes-helm/tiller:v2.13.1</span><br></pre></td></tr></table></figure><p>对于k8s.gcr.io镜像仓库，是将k8s.gcr.io替换成gcr.azk8s.cn/google-containers</p><p>例如，k8s.gcr.io/addon-resizer:1.8.4镜像，可以用下面的命令进行拉取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull gcr.azk8s.cn/google-containers/addon-resizer:1.8.4</span><br></pre></td></tr></table></figure><h2 id="quay-io镜像加速"><a href="#quay-io镜像加速" class="headerlink" title="quay.io镜像加速"></a>quay.io镜像加速</h2><p>有些镜像存放在quay.io仓库里，这个镜像仓库在国内的拉取速度特别慢，因此也可以使用<strong>Azure中国镜像</strong>来加快拉取速度</p><p>quay.io镜像仓库是直接把quay.io替换成quay.azk8s.cn</p><p>例如quay.io/dexidp/dex:v2.10.0，可以用下面的命令进行拉取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull quay.azk8s.cn/dexidp/dex:v2.10.0</span><br></pre></td></tr></table></figure><p>补充一下，对于dockerhub的仓库，也可以使用dockerhub.azk8s.cn进行加速</p><p>例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull dockerhub.azk8s.cn/library/nginx</span><br></pre></td></tr></table></figure><h2 id="helm镜像仓库"><a href="#helm镜像仓库" class="headerlink" title="helm镜像仓库"></a>helm镜像仓库</h2><p><strong>Azure中国</strong> 对于helm也提供了国内的镜像地址</p><p>如果是新安装的helm,可以使用下面的命令进行初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm init --stable-repo-url http://mirror.azure.cn/kubernetes/charts/</span><br></pre></td></tr></table></figure><p>对于已经安装号helm，可以按照下面的命令替换成Azure中国的镜像仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">helm repo remove stable</span><br><span class="line">helm repo add stable http://mirror.azure.cn/kubernetes/charts/</span><br><span class="line">helm repo add incubator http://mirror.azure.cn/kubernetes/charts-incubator/</span><br><span class="line">helm repo update</span><br><span class="line">helm repo list</span><br></pre></td></tr></table></figure><p>除了Azure中国以外，阿里云和中科大也提供了对应的镜像仓库地址</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;&lt;em&gt;现在 azk8s.cn只允许azure的访问了，可以用下面的内容替代&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;gcr.io ==&amp;gt; registry.aliyuncs.com&lt;/p&gt;
&lt;p&gt;k8s.gcr.io =
      
    
    </summary>
    
      <category term="kubernetes" scheme="https://www.lixf.io/categories/kubernetes/"/>
    
    
      <category term="docker" scheme="https://www.lixf.io/tags/docker/"/>
    
      <category term="k8s" scheme="https://www.lixf.io/tags/k8s/"/>
    
      <category term="helm" scheme="https://www.lixf.io/tags/helm/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL创建数据库和用户</title>
    <link href="https://www.lixf.io/2019/05/07/mysql-create-user/"/>
    <id>https://www.lixf.io/2019/05/07/mysql-create-user/</id>
    <published>2019-05-07T12:49:24.000Z</published>
    <updated>2020-05-07T12:56:28.412Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建UTF-8编码的数据库"><a href="#创建UTF-8编码的数据库" class="headerlink" title="创建UTF-8编码的数据库"></a>创建UTF-8编码的数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database testbase default character set utf8 collate utf8_general_ci;</span><br></pre></td></tr></table></figure><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user &apos;testuser&apos;@&apos;%&apos; identified by &apos;password&apos;;</span><br></pre></td></tr></table></figure><p>创建密码为 password 的 testuser 用户，%代表允许在所有地址上登陆，可以改成localhost或者127.0.0.1只允许本地登录</p><h3 id="授权数据库给用户"><a href="#授权数据库给用户" class="headerlink" title="授权数据库给用户"></a>授权数据库给用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant select,insert,update,delete,create,drop on test.* to testuser;</span><br></pre></td></tr></table></figure><p>授权testuser对test数据库下的所有表进行查询、插入、更新、删除、新建操作</p><h3 id="刷新权限"><a href="#刷新权限" class="headerlink" title="刷新权限"></a>刷新权限</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush  privileges</span><br></pre></td></tr></table></figure><h3 id="取消授权"><a href="#取消授权" class="headerlink" title="取消授权"></a>取消授权</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">revoke all on *.* from testuser</span><br></pre></td></tr></table></figure><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from mysql.user where user=&apos;testuser&apos;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;创建UTF-8编码的数据库&quot;&gt;&lt;a href=&quot;#创建UTF-8编码的数据库&quot; class=&quot;headerlink&quot; title=&quot;创建UTF-8编码的数据库&quot;&gt;&lt;/a&gt;创建UTF-8编码的数据库&lt;/h3&gt;&lt;figure class=&quot;highlight plai
      
    
    </summary>
    
    
      <category term="mysql" scheme="https://www.lixf.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>欢迎访问我的博客</title>
    <link href="https://www.lixf.io/2019/05/07/welcome-my-blog/"/>
    <id>https://www.lixf.io/2019/05/07/welcome-my-blog/</id>
    <published>2019-05-07T12:16:23.000Z</published>
    <updated>2020-05-07T12:59:55.688Z</updated>
    
    <content type="html"><![CDATA[<h2 id="欢迎访问李小飞的个人博客"><a href="#欢迎访问李小飞的个人博客" class="headerlink" title="欢迎访问李小飞的个人博客"></a>欢迎访问李小飞的个人博客</h2><p><img src="https://static.huiyuanai.com/lixfio/image/welcome-my-blog/shamo.jpg" alt></p><p><img src="https://static.huiyuanai.com/lixfio/image/welcome-my-blog/footbg2.png" alt></p><p><img src="https://static.huiyuanai.com/lixfio/image/welcome-my-blog/touxiang.jpeg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;欢迎访问李小飞的个人博客&quot;&gt;&lt;a href=&quot;#欢迎访问李小飞的个人博客&quot; class=&quot;headerlink&quot; title=&quot;欢迎访问李小飞的个人博客&quot;&gt;&lt;/a&gt;欢迎访问李小飞的个人博客&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://static.huiyu
      
    
    </summary>
    
      <category term="杂谈" scheme="https://www.lixf.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="欢迎" scheme="https://www.lixf.io/tags/%E6%AC%A2%E8%BF%8E/"/>
    
      <category term="博客" scheme="https://www.lixf.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
